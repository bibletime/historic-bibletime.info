##########################################################################################
#
#	My Guestbook V5.0
#	©2001, Jim Melanson
#
#	Configuration Vars and Utility Processing Subroutines
#
#	Requirements:		UNIX Server, Perl5+
#	Created:		September 22nd, 2000
#	Author: 		Jim Melanson, Owner and Developer
#	Contact:		www.charityware.ws
#				Phone:		1-705-437-3283
#				Fax:		1-208-694-1613
#				E-Mail:		info@charityware.ws
#
#	Users Guide: http://www.charityware.ws/en/programs/page_updater/users_guide.shtml
#
##########################################################################################

$DataKey = 'randomchar';
$DefaultData = $ENV{'DOCUMENT_ROOT'}."/cgi-bin/";
########################################################################################
#
#				  	DO NOT EDIT
#					  ANYTHING
#				       BELOW THIS LINE
#
##########################################################################################
#

%DEFAULT = (
    'adminemail' 	=> 'info@bibletime.de',
    'mailprogram' 	=> '/usr/sbin/sendmail',
    'sitename' 		=> 'BibleTime - guestbook',
    'warn' 		=> 'MAROON',
    'perpage'		=> 10,
    'validation' 	=> 1,
);

sub InitializeConfigurationVariables {

    @switches = (admin_notify, thank_you, mail_me, reverse_order, post_form_at_top);

}

########################################################################################
#
#	Program Common Subroutines
#
########################################################################################

sub GetConfig {
    my $config = new MongerFile("$Data/config.ftf");
    my @config = $config->get;
    %CONFIG = ();
    foreach(@config) {
	my ($ck, $cv) = split(/\|\|/, $_);
	$CONFIG{$ck} = $cv;
    }
    $CONFIG{font} = qq~<FONT COLOR="#000000" FACE="verdana,helvetica,arial" SIZE="2">~;
    $CONFIG{last_post_display} = 'GMT';
    $CONFIG{warn} ||= $CONFIG{text};
    $CONFIG{perpage} = 20;
}

sub PrintPostingForm {
    my $templateid = shift;
    if($templateid) {
	require 'guestbook_templates.lib';
	print $TEMPLATE{"form_$templateid"};
    } else {
	my $form = new MongerFile("$Data/template/form.ftf");
	print qq~<FORM ACTION="$ScriptURL?post" METHOD="POST">~;
	print qq~<INPUT TYPE="HIDDEN" NAME="action" VALUE="process_posting">~;
	$form->no_chomp;
	$form->printfile;
	print qq~</FORM>~;
    }
}

sub list_posts {
    #Returns a list of unique file numbers
    my $type = shift;
    if($type =~ /^(current|pending)$/) {
	opendir(READ, "$Data/$type");
	my @posts_temp = grep {/^\d+\.ftf$/} readdir(READ);
	closedir(READ);
	my @posts_return;
	foreach(@posts_temp) {
	    $_ =~ /^(\d+)\.ftf$/;
	    push(@posts_return, $1);
	}
        my @sorted_return = sort {$a <=> $b} @posts_return;
	return(@sorted_return);
    }
}

sub list_pending_confirmation {
    #Returns a list of unique file numbers
    opendir(READ, "$Data/pending");
    my @posts_temp = grep {/^confirm\_\d+\.ftf$/} readdir(READ);
    closedir(READ);
    my @posts_return;
    foreach(@posts_temp) {
	$_ =~ /^confirm\_(\d+)\.ftf$/;
	push(@posts_return, $1);
    }
    my @sorted_return = sort {$a <=> $b} @posts_return;
    return(@sorted_return);
}

sub get_post {
    my $postid = shift;
    my $type   = shift;
    $type ||= 'current';
    if($type =~ /^(current|pending)$/) {
	my $post_file = new MongerFile("$Data/$type/$postid.ftf");
	my @post = $post_file->get;
	my %temp;
	foreach(@post) {
	    my ($pk, $pv) = split(/\|\|/, $_);
	    $temp{$pk} = $pv;
	}
	return(%temp);
    } else {
	return(0);
    }
}

##############################################################################
#
#				 COOKIE SUBROUTINES
#		      Compressed and modified from the following
#
##############################################################################
# HTTP Cookie Library           Version 2.1                                  #
# Copyright 1996 Matt Wright    mattw@worldwidemart.com                      #
# Created 07/14/96              Last Modified 12/23/96                       #
# Script Archive at:            http://www.worldwidemart.com/scripts/        #
#                               Extensive Documentation found in README file.#
##############################################################################
# COPYRIGHT NOTICE                                                           #
# Copyright 1996 Matthew M. Wright.  All Rights Reserved.                    #
#									     #
# Modifications 1999/08/26 by Jim Melanson				     #
# Modifications 2000/11/10 by Jim Melanson				     #
#									     #
##############################################################################

sub GetCookies {
    if ($ENV{'HTTP_COOKIE'}) {
	&InitializeCookieArrays;
	my $char;
	foreach (split(/; /,$ENV{'HTTP_COOKIE'})) {
	    my ($cookie,$value) = split(/=/);
	    foreach $char (@Cookie_Decode_Chars) {
	 	$cookie =~ s/$char/$Cookie_Decode_Chars{$char}/g;
		$value =~ s/$char/$Cookie_Decode_Chars{$char}/g;
	    }
	    $COOKIE{$cookie} = $value;
	}
	return(1);
    } else {
	return(0);
    }
}

sub SetCookies {
    my (@cookies) = @_;
    &InitializeCookieArrays;
    my $char;
    while( my($cookie,$value) = @cookies ) {
	foreach $char (@Cookie_Encode_Chars) {
	    $cookie =~ s/$char/$Cookie_Encode_Chars{$char}/g;
	    $value =~ s/$char/$Cookie_Encode_Chars{$char}/g;
	}
	print 'Set-Cookie: ' . $cookie . '=' . $value . ';' . "\n";
	shift(@cookies); shift(@cookies);
    }
    return(1);
}

sub InitializeCookieArrays {
    @Cookie_Encode_Chars = ('\%', '\+', '\;', '\,', '\=', '\&', '\:\:', '\s');
    %Cookie_Encode_Chars = ('\%', '%25', '\+',   '%2B', '\;',   '%3B', '\,',   '%2C', '\=',   '%3D', '\&',   '%26', '\:\:', '%3A%3A', '\s',   '+');
    @Cookie_Decode_Chars = ('\+', '\%3A\%3A', '\%26', '\%3D', '\%2C', '\%3B', '\%2B', '\%25');
    %Cookie_Decode_Chars = ('\+', ' ', '\%3A\%3A', '::', '\%26',     '&', '\%3D',     '=', '\%2C',     ',', '\%3B',     ';', '\%2B',     '+', '\%25',     '%');
}

########################################################################################
#
#	Utility Subroutines
#
########################################################################################

sub check_email {
    my($fe_email) = $_[0];
    if($fe_email) {
        if(($fe_email =~ /(@.*@)|(\.\.)|(@\.)|(\.@)|(^\.)|(\.$)/) ||
	    ($fe_email !~ /^.+@\[?(\w|[-.])+\.[a-zA-Z]{2,3}|[0-9]{1,3}\]?$/)) {
	    return(0);
        }
        else {return(1)}
    }
    else {
    	return(0);
    }
}

sub Date {
    my($time_offset) = 0;

    #NOTE: The variables $DAYOFMONTH, $MONTH, $THISYEAR, $SHORTDAY, $LONGDAY, $SHORTMONTH, $LONGMONTH are not
    #localized with local or my because they may be access from outside the subroutine.
    my($second, $minute, $hour, $year, $weekday, $dayofyear, $isDST, $get_pid, $length_pid, $start_cut, $pid, $add_zero, $offset);
    my @dnl = ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
    my @dns = ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
    my @mnl = ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
    my @mns = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
    $offset = time + ($time_offset * 3600);
    ($second, $minute, $hour, $DAYOFMONTH, $MONTH, $year, $weekday, $dayofyear, $isDST) = localtime($offset);
    $SHORTDAY = $dns[$weekday];
    $LONGDAY  = $dnl[$weekday];
    $SHORTMONTH = $mns[$MONTH];
    $LONGMONTH  = $mnl[$MONTH];
    $THISYEAR = $year + 1900;
    $MONTH++;
    if($MONTH < 10) {$MONTH = "0" . $MONTH}
    if($DAYOFMONTH < 10) {$DAYOFMONTH = "0" . $DAYOFMONTH}
    if($hour < 10) {$hour = "0" . $hour}
    if($minute < 10) {$minute = "0" . $minute}
    if($second < 10) {$second = "0" . $second}
    $DATE = "$THISYEAR/$MONTH/$DAYOFMONTH";
    $TIME = "$hour:$minute:$second";

    $get_pid = abs($$);
    $length_pid = length($get_pid);
    if($length_pid > 10) {
	$start_cut = $length_pid - 10;
	$pid = substr($get_pid, $start_cut, 10);
    }
    elsif($length_pid < 10) {
	$add_zero = 10 - $length_pid;
	$pid = "0" x $add_zero . $get_pid;
    } else {
	$pid = $get_pid;
    }
    $PID_DATE = "$THISYEAR$MONTH$DAYOFMONTH$pid";
}

sub format_length {
    my($fl_var) = $_[0];
    my($fl_min) = $_[1];
    my($fl_max) = $_[2];
    if(!$fl_min) {
	$fl_min = 6;
    }
    if(!$fl_max) {
 	$fl_max = 10;
    }
    my($fl_length) = length($fl_var);
    if($fl_length > $fl_max) {
    	$fl_return = substr($fl_var, 0, $fl_max);
 	return($fl_return);
    }
    elsif($fl_length < $fl_min) {
    	my($fl_redo) = $fl_var x 2;
   	$fl_return = format_length($fl_redo, $fl_min, $fl_max);
  	return($fl_return);
    } else {
   	$fl_return = $fl_var;
   	return($fl_return);
    }
}

sub format_url {
    my($fu_url) = $_[0];
    if($fu_url) {
	my($return_url);
        if($fu_url =~ /^(\w|\W){1,7}\/(\w.+)/) {
    	    $return_url = "http://$2";
        }
        elsif($fu_url =~ /^http:\/\//) {
    	    $return_url = $FORM{'goto'};
        } else {
    	    $return_url = "http://$fu_url";
        }
	if($return_url !~ /^http:\/\//) {
	    $return_url = "http://$return_url";
	}
	return($return_url);
    } else {
	return(0);
    }
}

sub Parse {
    my($name, $value, $buffer, $pair, $hold, @pairs);

    read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
    @pairs = split(/&/, $buffer);
    foreach $pair (@pairs) {
	($name, $value) = split(/=/, $pair);
	$value =~ tr/+/ /;
	$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
	$name =~ s/\n//g;
	$name =~ s/\r//g;
	unless(($name =~ /(headerdata|footerdata)/) || ($name =~ /^template.+$/) || ($0 =~ /guestbook\.pl$/) || ($ENV{'QUERY_STRING'} =~ /posting\&edit/)) {
	    $value =~ s/\n//g;
	}
	$value =~ s/\r//g;

      #This section checks the value portion (user input) of
      #all name/value pairs.
        unless(($0 =~ /mgb_admin.pl$/) || (-e "$Data/permit_html.ftf")) {
	    #$value =~ s/<.+>?//g;		#Remove this tag to permit HTML tags
	    $value =~ s/</&lt;/g;
	    $value =~ s/>/&gt;/g;
	    $value =~ s/< *((SCRIPT)|(APPLET)|(EMBED))[^>]+>//ig;
	    $value =~ s/<!--(.|\n)*-->//g;
	}
	$value =~ s/\s-\w.+//g;
	$value =~ s/\0//g;
	$value =~ s/\|//g;
	$value =~ s/\\//g;
	$value =~ s/system\(.+//g;
	$value =~ s/grep//g;
	$value =~ s/\srm\s//g;
	$value =~ s/\srf\s//g;
	$value =~ s/\.\.([\/\:]|$)//g;


      #This section checks the value portion (from element name) of
      #all name/value pairs. This was included to prevent any nasty
      #surprises from those who would hijack you forms!
        $name =~ s/<.+>?//g;
	$name =~ s/<!--(.|\n)*-->//g;
	$name =~ s/^\s-\w.+//g;
	$name =~ s/\0//g;
	$name =~ s/\|//g;
	$name =~ s/\\//g;
	$name =~ s/system\(.+//g;
	$name =~ s/grep//g;
	$name =~ s/\srm\s//g;
	$name =~ s/\srf\s//g;
	$name =~ s/\.\.([\/\:]|$)//g;
	$name =~ s/< *((SCRIPT)|(APPLET)|(EMBED))[^>]+>//ig;

	$FORM{$name} = $value;
    }
}

sub split_encrypt {
    my $value = shift;
    if($value) {
	my $salt = substr($value, 0, 2);
	my $passval = crypt($value, $salt);
	$passval = substr($passval, 2, length($passval));
	return($passval);
    } else {
	return();
    }
}


sub PrintButton {
    my ($but_val,$but_width,$override_class,$but_type,$but_name,$event) = @_;
    my ($the_event,$the_width,$but_events,$the_name);
    if((($ENV{'HTTP_USER_AGENT'} =~/MSIE/i) && ($ENV{'HTTP_USER_AGENT'} !~/OPERA/i) && ($ENV{'HTTP_USER_AGENT'} !~/AOL/i)) || ($ENV{'HTTP_USER_AGENT'} =~/NETSCAPE/i)){
	if($override_class){
	    $but_events = "style=\"width:$but_width" . "px;cursor:hand;\"";
	} else {
	    $but_events = qq~ class="but" onmouseover="this.className='buto'" onmouseout="this.className='but'"~;
	}
    } else {
	$but_events = qq~~;
    }
    $but_val ||= qq~Submit~;
    $but_type ||= qq~Submit~;
    if($but_width){ $the_width = qq~ width="$but_width"~;}
    if($event){ $the_event = qq~ $event~;}
    if($but_name){ $the_name = qq~ name="$but_name"~;}
    return(qq~<font style="font-size:14px;font-family:Arial;font-weight:bold;"><input type="$but_type" value="$but_val"$the_width$the_event$but_events$the_name></font>~);
}

sub PrintHeaderBar {
    my $header_text  = shift;
    my $header_width = shift;
    $header_text ||= "&nbsp;";
    $header_width ||= '100%';
    print qq~
<table border=2 width="$header_width">
  <TR>
    <TD style="border:white outset 2px;" colspan="2" align="center" bgcolor="#AAAAAA" width="$header_with">
	<FONT SIZE="+1"><B>$header_text</B></FONT>
    </TD>
  </TR>
</table>
    ~;
}



1;
